<% layout("layout/page")%>
<% block("title", "Chat")%>

<!--<script src = "vendor/bower_components/socket.io-client/socket.io.js"></script> -->
<style>
    .btn-default {
        margin-top: 5px;
    }
    .log {
        padding-bottom: 5px;
        display:block;
        z-index: 5;
        overflow: auto;
        height: 350px;

        word-wrap: break-word;

    }
    @media screen and (max-width: 980px) {
        .log {
            height: 300px;
        }
    }
    @media screen and (max-width: 650px)
    {
        .log {
            height: 200px;
        }
    }
    @media screen and (max-width: 500px)
    {
        .log {
            height: 150px;
        }
    }

    .in {
        color: rgb(0, 0, 0);
    }
    .out {
        color: rgb(31, 181, 24);
    }
    .priv {
        color: rgb(225, 72, 166);
    }
    .time {
        color: rgb(144, 144, 144);
        font: 0.8em 'Courier New';
    }
    .sys {
        color: rgb(165, 42, 42);
    }
    .user {
        color: rgb(25, 25, 112);
    }
</style>

<script src = "/socket.io/socket.io.js"></script>
<div id="room">
    <div class="form-group">
        <div class="well log" id="log">
        </div>
    </div>
    <form>
        <textarea maxlength="1024"class="form-control" rows="2" autocomplete="off" autofocus placeholder="Сообщение..." id="text"></textarea>
        <button onclick="sendMessage()" type="button" class="btn btn-default id="butSend">Отправить</button>
        <button onclick="clearHistory()" type="button" class="btn btn-default id="butClear">Очистить</button>

    </form>
</div>
<script>
    var socket = io.connect('', {
        reconnect: false,
        transports: [
                'websocket',
                'flashsocket',
                'htmlfile',
                'xhr-polling',
                'jsonp-polling'
            ]

    });

    var strings = {
        'connected': '[sys][time]%time%[/time] Вы успешно соединились к сервером как [user]%name%[/user].[/sys]',
        'userJoined': '[sys][time]%time%[/time] Пользователь [user]%name%[/user] присоединился к чату.[/sys]',
        'messageSent': '[out][time]%time%[/time] [user]%name%[/user]: %text%[/out]',
        'messageSentPrivate': '[priv][time]%time%[/time] [user]%name%[/user] -> [user]%recipient%[/user]: %text%[/priv]',
        'messageReceived': '[in][time]%time%[/time] [user]%name%[/user]: %text%[/in]',
        'messageReceivedPrivate': '[priv][time]%time%[/time] [user]%name%[/user] -> [user]%recipient%[/user]: %text%[/priv]',
        'userSplit': '[sys][time]%time%[/time] Пользователь [user]%name%[/user] покинул чат.[/sys]'
    };

    var form = $("#room form");
    var ul = $("#room ul");
    var input = $("#text");
    var btn = $("#btnSend");

    /*$(document).ready(function ()
    {
        $("a, input").click(function ()
        {
            window.onbeforeunload = null;
        });
        $("form").submit(function ()
        {
            window.onbeforeunload = null;
        });
    });
    $(window).bind('beforeunload', function(event){
       // event.returnValue = "ODFSFJ";
        return "ffffff";
    });*/
    function clearScreen()
    {
        $("#log").html("");
    }
    function clearHistory() {
        localStorage.setItem("messages", "");
        clearScreen();
    }
    function getName() {
        var str = "[" + $(this).html() + "]" + input.val();
        input.val(str);
    }
    $("#log").delegate(".user", "click", getName);

    function getUsersOnline() {
        var usersOnline = "";
        for (var name in localStorage) {
            if (localStorage[name] == "online" || localStorage[name] == "offline") {
                usersOnline += name + " ";
            }
        }
        return usersOnline;
    }

    function setMessage(msg) {
        if (localStorage.getItem("messages") == null)
            localStorage['messages'] = "";
        var text = strings[msg.event].replace(/\[([a-z]+)\]/g, '<span class="$1">')
                        .replace(/\[\/[a-z]+\]/g, '</span>').replace(/\%time\%/, msg.time).replace(/\%name\%/, msg.name).replace(/\%recipient\%/, msg.recipient)
                        .replace(/\%text\%/, unescape(msg.text).replace('<', '&lt;').replace('>', '&gt;')) + '<br>';
        localStorage['messages'] += text;
        printMessage(text);
    }

    function printMessage(text) {
        $("<span>", {html: text}).appendTo($("#log"));
        document.querySelector('#log').scrollTop = document.querySelector('#log').scrollHeight;
    }
    function sendMessage()
    {
        var regSpace =/^\s+$/;
        var regUser = /^\[([a-zа-яё0-9_]{3,20})\]/i;
        var mes = input.val().toString().trim();

        var users = regUser.exec(mes);
        var user = null;
        if (users)
        {
            user = users[1];
            mes = mes.replace(regUser, "");
        }
        if (mes.length == 0) //|| mes.match(regSpace) !== null
        {
            input.val("");
            return false;
        }
        var text = escape(mes);
        input.val("");
        socket.emit("message", text, user);
        return false;
    }
    function sendEnter(event) {
        if (event.which == '13' && !event.shiftKey) {
            event.preventDefault();
            sendMessage();
        }
    }
    function checkMaxSize(event) {
    }
    $(window).bind("storage", function(e) {
        //alert(e.key);
    });

    function checkUserSplit(msg) {
        if (localStorage.getItem(msg.name) != "online")
        {
            var count = parseInt(localStorage.getItem(msg.name + "Count"));
            count--;
            if (count == 0) {
                localStorage.removeItem(msg.name);
                localStorage.removeItem(msg.name + "Count");
                setMessage(msg);
            } else {
                localStorage.setItem(msg.name + "Count", count);
            }
        }
    }

    socket.on("message", function(msg) {
                if (msg.event == "connected")
                {
                    if (localStorage['saidLogin'] == "false")
                    {
                        localStorage['saidLogin'] = "true";
                        localStorage.setItem("__MY_NAME__", msg.name);
                        setMessage(msg);
                    }
                } else if (msg.event == "userJoined")
                {
                    if (localStorage.getItem("__MY_NAME__") == msg.name)
                    {

                    } else if (localStorage.getItem(msg.name) == null)
                    {
                        localStorage.setItem(msg.name, "online");
                        localStorage.setItem(msg.name + "Count", "1")
                        setMessage(msg);
                    }
                    else {
                        localStorage.setItem(msg.name, "online");
                        var count = parseInt(localStorage.getItem(msg.name + "Count"));
                        count++;
                        localStorage.setItem(msg.name + "Count", count);
                    }
                } else if (msg.event == "userSplit")
                {
                    if (localStorage.getItem("__MY_NAME__") == msg.name)
                    {

                    } else
                    {
                        localStorage.setItem(msg.name, "offline");
                        setTimeout(function() {checkUserSplit(msg);}, 4000);
                    }
                }
                else if (msg.recipient)
                {
                    if ((msg.recipient == localStorage.getItem("__MY_NAME__")) || msg.name == localStorage.getItem("__MY_NAME__"))
                    {
                        setMessage(msg);
                    }
                } else
                    setMessage(msg);
            })
            .on("connect", function() {
                console.log("connect");
                input.bind("keypress", function(event) {sendEnter(event)});
                //input.bind('input propertychange', function(event) {checkMaxSize(event)});
                form.on("submit", sendMessage);
                btn.prop("disabled", false);
                printMessage(localStorage['messages']);
            })
            .on("disconnect", function() {
                console.log("disconnect");
                input.unbind("keypress", function(event) {sendEnter(event)});
                form.off("submit", sendMessage);
                btn.prop("disabled", true);
                setTimeout(reconnect, 500);
            })
            .on("logout", function() {
                location.href = "/";
            });
    function reconnect() {
        socket.once("error", function() {
            setTimeout(reconnect, 500);
        });
        socket.socket.connect();
    }

</script>